
import { useState, useRef, useEffect } from 'react';
import { Globe, ChevronDown } from 'lucide-react';
import { Input } from '@/components/ui/input';

interface Country {
  code: string;
  name: string;
  flag: string;
}

const countries: Country[] = [
  { code: 'IN', name: 'India', flag: 'ðŸ‡®ðŸ‡³' },
  { code: 'US', name: 'United States', flag: 'ðŸ‡ºðŸ‡¸' },
  { code: 'GB', name: 'United Kingdom', flag: 'ðŸ‡¬ðŸ‡§' },
  { code: 'CA', name: 'Canada', flag: 'ðŸ‡¨ðŸ‡¦' },
  { code: 'AU', name: 'Australia', flag: 'ðŸ‡¦ðŸ‡º' },
  { code: 'DE', name: 'Germany', flag: 'ðŸ‡©ðŸ‡ª' },
  { code: 'FR', name: 'France', flag: 'ðŸ‡«ðŸ‡·' },
  { code: 'JP', name: 'Japan', flag: 'ðŸ‡¯ðŸ‡µ' },
  { code: 'CN', name: 'China', flag: 'ðŸ‡¨ðŸ‡³' },
  { code: 'SG', name: 'Singapore', flag: 'ðŸ‡¸ðŸ‡¬' },
  { code: 'MY', name: 'Malaysia', flag: 'ðŸ‡²ðŸ‡¾' },
  { code: 'TH', name: 'Thailand', flag: 'ðŸ‡¹ðŸ‡­' },
  { code: 'AE', name: 'United Arab Emirates', flag: 'ðŸ‡¦ðŸ‡ª' },
  { code: 'SA', name: 'Saudi Arabia', flag: 'ðŸ‡¸ðŸ‡¦' },
  { code: 'BR', name: 'Brazil', flag: 'ðŸ‡§ðŸ‡·' },
  { code: 'IT', name: 'Italy', flag: 'ðŸ‡®ðŸ‡¹' },
  { code: 'ES', name: 'Spain', flag: 'ðŸ‡ªðŸ‡¸' },
  { code: 'NL', name: 'Netherlands', flag: 'ðŸ‡³ðŸ‡±' },
  { code: 'CH', name: 'Switzerland', flag: 'ðŸ‡¨ðŸ‡­' },
  { code: 'RU', name: 'Russia', flag: 'ðŸ‡·ðŸ‡º' },
  { code: 'KR', name: 'South Korea', flag: 'ðŸ‡°ðŸ‡·' },
  { code: 'ZA', name: 'South Africa', flag: 'ðŸ‡¿ðŸ‡¦' },
  { code: 'MX', name: 'Mexico', flag: 'ðŸ‡²ðŸ‡½' },
  { code: 'AR', name: 'Argentina', flag: 'ðŸ‡¦ðŸ‡·' },
  { code: 'EG', name: 'Egypt', flag: 'ðŸ‡ªðŸ‡¬' },
  { code: 'TR', name: 'Turkey', flag: 'ðŸ‡¹ðŸ‡·' },
  { code: 'ID', name: 'Indonesia', flag: 'ðŸ‡®ðŸ‡©' },
  { code: 'PH', name: 'Philippines', flag: 'ðŸ‡µðŸ‡­' },
  { code: 'VN', name: 'Vietnam', flag: 'ðŸ‡»ðŸ‡³' },
  { code: 'BD', name: 'Bangladesh', flag: 'ðŸ‡§ðŸ‡©' },
  { code: 'PK', name: 'Pakistan', flag: 'ðŸ‡µðŸ‡°' },
  { code: 'LK', name: 'Sri Lanka', flag: 'ðŸ‡±ðŸ‡°' },
  { code: 'NP', name: 'Nepal', flag: 'ðŸ‡³ðŸ‡µ' },
  { code: 'MM', name: 'Myanmar', flag: 'ðŸ‡²ðŸ‡²' },
  { code: 'KH', name: 'Cambodia', flag: 'ðŸ‡°ðŸ‡­' },
  { code: 'LA', name: 'Laos', flag: 'ðŸ‡±ðŸ‡¦' },
  { code: 'BT', name: 'Bhutan', flag: 'ðŸ‡§ðŸ‡¹' },
  { code: 'MV', name: 'Maldives', flag: 'ðŸ‡²ðŸ‡»' }
];

interface CountryAutocompleteProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}

const CountryAutocomplete = ({ value, onChange, placeholder = "Select nationality" }: CountryAutocompleteProps) => {
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [filteredCountries, setFilteredCountries] = useState<Country[]>([]);
  const inputRef = useRef<HTMLInputElement>(null);
  const suggestionsRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (suggestionsRef.current && !suggestionsRef.current.contains(event.target as Node)) {
        setShowSuggestions(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const filterCountries = (query: string) => {
    if (!query) {
      setFilteredCountries(countries);
      return;
    }

    const filtered = countries.filter(country =>
      country.name.toLowerCase().includes(query.toLowerCase()) ||
      country.code.toLowerCase().includes(query.toLowerCase())
    );
    setFilteredCountries(filtered);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    onChange(inputValue);
    filterCountries(inputValue);
    setShowSuggestions(true);
  };

  const handleCountrySelect = (country: Country) => {
    onChange(country.name);
    setShowSuggestions(false);
  };

  const handleFocus = () => {
    filterCountries(value);
    setShowSuggestions(true);
  };

  return (
    <div className="relative" ref={suggestionsRef}>
      <div className="relative">
        <Globe className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
        <Input
          ref={inputRef}
          type="text"
          placeholder={placeholder}
          value={value}
          onChange={handleInputChange}
          onFocus={handleFocus}
          className="pl-10 pr-10"
        />
        <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
      </div>

      {showSuggestions && filteredCountries.length > 0 && (
        <div className="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg z-50 max-h-60 overflow-y-auto mt-1">
          {filteredCountries.map((country) => (
            <div
              key={country.code}
              onClick={() => handleCountrySelect(country)}
              className="p-3 hover:bg-gray-50 cursor-pointer flex items-center space-x-3 border-b border-gray-100 last:border-b-0"
            >
              <span className="text-lg">{country.flag}</span>
              <span className="font-medium text-gray-900">{country.name}</span>
              <span className="text-sm text-gray-500 ml-auto">{country.code}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default CountryAutocomplete;
